// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"kio/requestid"
)

// NewHealthzParams creates a new HealthzParams object
// with the default values initialized.
func NewHealthzParams() *HealthzParams {
	var ()
	return &HealthzParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHealthzParamsWithTimeout creates a new HealthzParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHealthzParamsWithTimeout(timeout time.Duration) *HealthzParams {
	var ()
	return &HealthzParams{

		timeout: timeout,
	}
}

// NewHealthzParamsWithContext creates a new HealthzParams object
// with the default values initialized, and the ability to set a context for a request
// If ctx contains a request ID, this is automatically added to the params struct
func NewHealthzParamsWithContext(ctx context.Context) *HealthzParams {
	var ()

	params := &HealthzParams{

		Context: ctx,
	}

	id := requestid.FromContext(ctx)
	params.SetXRequestID(&id)
	return params
}

// NewHealthzParamsWithHTTPClient creates a new HealthzParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHealthzParamsWithHTTPClient(client *http.Client) *HealthzParams {
	var ()
	return &HealthzParams{
		HTTPClient: client,
	}
}

/*HealthzParams contains all the parameters to send to the API endpoint
for the healthz operation typically these are written to a http.Request
*/
type HealthzParams struct {

	/*XRequestID*/
	XRequestID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the healthz params
func (o *HealthzParams) WithTimeout(timeout time.Duration) *HealthzParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the healthz params
func (o *HealthzParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the healthz params
func (o *HealthzParams) WithContext(ctx context.Context) *HealthzParams {
	o.SetContext(ctx)
	id := requestid.FromContext(ctx)
	o.SetXRequestID(&id)
	return o
}

// SetContext adds the context to the healthz params
func (o *HealthzParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the healthz params
func (o *HealthzParams) WithHTTPClient(client *http.Client) *HealthzParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the healthz params
func (o *HealthzParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the healthz params
func (o *HealthzParams) WithXRequestID(xRequestID *string) *HealthzParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the healthz params
func (o *HealthzParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WriteToRequest writes these params to a swagger request
func (o *HealthzParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-ID
		if err := r.SetHeaderParam("X-Request-ID", *o.XRequestID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
