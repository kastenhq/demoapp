// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"kio/requestid"

	"demoapp/models"
)

// NewAddImageParams creates a new AddImageParams object
// with the default values initialized.
func NewAddImageParams() *AddImageParams {
	var ()
	return &AddImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddImageParamsWithTimeout creates a new AddImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddImageParamsWithTimeout(timeout time.Duration) *AddImageParams {
	var ()
	return &AddImageParams{

		timeout: timeout,
	}
}

// NewAddImageParamsWithContext creates a new AddImageParams object
// with the default values initialized, and the ability to set a context for a request
// If ctx contains a request ID, this is automatically added to the params struct
func NewAddImageParamsWithContext(ctx context.Context) *AddImageParams {
	var ()

	params := &AddImageParams{

		Context: ctx,
	}

	id := requestid.FromContext(ctx)
	params.SetXRequestID(&id)
	return params
}

// NewAddImageParamsWithHTTPClient creates a new AddImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddImageParamsWithHTTPClient(client *http.Client) *AddImageParams {
	var ()
	return &AddImageParams{
		HTTPClient: client,
	}
}

/*AddImageParams contains all the parameters to send to the API endpoint
for the add image operation typically these are written to a http.Request
*/
type AddImageParams struct {

	/*XRequestID*/
	XRequestID *string
	/*ImageItem
	  Image to add

	*/
	ImageItem *models.Image

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add image params
func (o *AddImageParams) WithTimeout(timeout time.Duration) *AddImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add image params
func (o *AddImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add image params
func (o *AddImageParams) WithContext(ctx context.Context) *AddImageParams {
	o.SetContext(ctx)
	id := requestid.FromContext(ctx)
	o.SetXRequestID(&id)
	return o
}

// SetContext adds the context to the add image params
func (o *AddImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add image params
func (o *AddImageParams) WithHTTPClient(client *http.Client) *AddImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add image params
func (o *AddImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the add image params
func (o *AddImageParams) WithXRequestID(xRequestID *string) *AddImageParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the add image params
func (o *AddImageParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithImageItem adds the imageItem to the add image params
func (o *AddImageParams) WithImageItem(imageItem *models.Image) *AddImageParams {
	o.SetImageItem(imageItem)
	return o
}

// SetImageItem adds the imageItem to the add image params
func (o *AddImageParams) SetImageItem(imageItem *models.Image) {
	o.ImageItem = imageItem
}

// WriteToRequest writes these params to a swagger request
func (o *AddImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-ID
		if err := r.SetHeaderParam("X-Request-ID", *o.XRequestID); err != nil {
			return err
		}

	}

	if o.ImageItem == nil {
		o.ImageItem = new(models.Image)
	}

	if err := r.SetBodyParam(o.ImageItem); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
